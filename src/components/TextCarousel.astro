---
import { imageURLCorrection } from "../data/imageURLCorrection";
import { getLangFromUrl, useTranslations } from "../i18n/utils";

interface Props {
  textes: Array<Object>;
  images: any;
}
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

const { textes, images } = Astro.props;

let carousel: Array<IImageMetaData> = [];

interface molecular_data {
  heroImage: string;
  title: string;
  excerpt: string;
}

interface IText {
  data: molecular_data;
  slug: string;
  authors: string;
}

interface IImgUrl {
  src: string;
}

interface IImageMetaData {
  imgUrl: IImgUrl;
  title: string;
  excerpt: string;
  url: string;
  authors: string;
}

await textes.forEach((txt: IText) => {
  let data: IImageMetaData = {
    imgUrl: images[imageURLCorrection(txt.data.heroImage)],
    title: txt.data.title,
    excerpt: txt.data.excerpt,
    url: txt.slug.split("/")[1],
    authors: txt.authors,
  };

  carousel.push(data);
});
let carouSize: number = carousel.length;

if (carousel.length < 2) {
  carousel.push(carousel[0]);
  carousel.push(carousel[0]);
} else if (carousel.length < 3) {
  carousel.push(carousel[0]);
}

const data = {
  slides: [
    {
      imgSrc: carousel[0].imgUrl.src,
      imgAlt:
        "Vibrant abstract painting with swirling blue and light pink hues on a canvas.",
      title: carousel[0].title,
      description: carousel[0].excerpt,
      ctaUrl: carousel[0].url,
      ctaText: t("readText"),
    },
    {
      imgSrc: carousel[1].imgUrl.src,
      imgAlt:
        "Vibrant abstract painting with swirling red, yellow, and pink hues on a canvas.",
      title: carousel[1].title,
      description: carousel[1].excerpt,
      ctaUrl: carousel[1].url,
      ctaText: t("readText"),
    },
    {
      imgSrc: carousel[2].imgUrl.src,
      imgAlt:
        "Vibrant abstract painting with swirling blue and purple hues on a canvas.",
      title: carousel[2].title,
      description: carousel[2].excerpt,
      ctaUrl: carousel[2].url,
      ctaText: t("readText"),
    },
  ],
  currentSlideIndex: 1,
};
---

<astro-text-carousel>
  <div
    x-data={JSON.stringify(data)}
    class="relative w-full overflow-hidden z-0"
  >
    <!-- previous button -->
    <button
      type="button"
      class="thePreviousButton absolute left-5 top-1/2 z-20 flex rounded-full -translate-y-1/2 items-center justify-center bg-white/40 p-2 text-neutral-600 transition hover:bg-white/60 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-black active:outline-offset-0 dark:bg-neutral-950/40 dark:text-neutral-300 dark:hover:bg-neutral-950/60 dark:focus-visible:outline-white"
      aria-label="previous slide"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 24 24"
        stroke="currentColor"
        fill="none"
        stroke-width="3"
        class="size-5 md:size-6 pr-0.5"
        aria-hidden="true"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          d="M15.75 19.5 8.25 12l7.5-7.5"></path>
      </svg>
    </button>

    <!-- next button -->
    <button
      type="button"
      class="theNextButton absolute right-5 top-1/2 z-20 flex rounded-full -translate-y-1/2 items-center justify-center bg-white/40 p-2 text-neutral-600 transition hover:bg-white/60 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-black active:outline-offset-0 dark:bg-neutral-950/40 dark:text-neutral-300 dark:hover:bg-neutral-950/60 dark:focus-visible:outline-white"
      aria-label="next slide"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 24 24"
        stroke="currentColor"
        fill="none"
        stroke-width="3"
        class="size-5 md:size-6 pl-0.5"
        aria-hidden="true"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          d="M8.25 4.5l7.5 7.5-7.5 7.5"></path>
      </svg>
    </button>

    <!-- slides -->
    <!-- Change min-h-[50svh] to your preferred height size -->
    <div class="relative min-h-[100svh] w-full">
      <template x-for="(slide, index) in slides">
        <div
          x-cloak
          x-show="currentSlideIndex == index + 1"
          class="absolute inset-0"
          x-transition.opacity.duration.1000ms
        >
          <!-- Title and description -->

          <div
            class="flex-col content-start flex-wrap sm:flex-nowrap pt-[32rem] px-0 sm:px-32 sm:pt-14 sm:flex-row lg:px-32 lg:py-14 absolute inset-0 z-10 flex break-normal items-center justify-center gap-2 bg-gradient-to-t from-neutral-950/85 to-transparent py-12"
          >
            <!-- indicators -->
            <div
              class="theIndicators absolute top-[55%] ounded-md bottom-3 md:bottom-5 left-[30%] z-20 flex -translate-x-1/2 gap-4 md:gap-3 px-1.5 py-1 md:px-2"
              role="group"
              aria-label="slides"
            >
              <template x-for="(slide, index) in slides">
                <button
                  class="anIndicator size-4 cursor-pointer rounded-full transition"
                  x-on:click="(currentSlideIndex = index + 1)"
                  x-bind:id="index"
                  x-bind:class="[currentSlideIndex === index + 1 ? 'bg-neutral-300' : 'bg-neutral-300/50']"
                  x-bind:aria-label="'slide ' + (index + 1)"></button>
              </template>
            </div>
            <div
              class="titleDiv w-[80%] sm:relative sm:top-[205px] sm:w-6/12 flex flex-col justify-start"
            >
              <h3
                class="w-full h-40 text-wrap pt-6 lg:text-6xl md:whitespace-nowrap lg:w-full lg:max-w-full lg:max-h-10 lg:h-10 sm:text-balance text-5xl font-bold text-white animatedTitle"
                x-text="slide.title"
                x-bind:aria-describedby="'slide' + (index + 1) + 'Description'"
              >
              </h3>
              <p
                class="w-full h-20 ml-8 sm:ml-0 text-pretty sm:h-20 sm:mt-7 text-sm text-neutral-300"
                x-text="slide.description"
                x-bind:id="'slide' + (index + 1) + 'Description'"
              >
              </p>
              <div
                class="absolute sm:relative top-[50%] left-[50%] -translate-x-1/2 -translate-y-1/2 w-full max-w-fit ml-auto mr-auto"
              >
                <a x-bind:href="slide.ctaUrl"
                  ><button
                    type="button"
                    x-cloak
                    x-show="slide.ctaUrl !== null"
                    class="mt-2 cursor-pointer whitespace-nowrap rounded-md border border-white bg-transparent px-4 py-2 text-center text-xs font-medium tracking-wide text-white transition hover:opacity-75 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-onSurfaceDarkStrong active:opacity-100 active:outline-offset-0 md:text-lg md:ml-[40vw]"
                    x-text="slide.ctaText"></button></a
                >
              </div>
            </div>
            <div class="displayDiv w-6/12 h-3/6"></div>
          </div>

          <img
            class="absolute w-full h-full inset-0 object-cover text-neutral-600 dark:text-neutral-300"
            x-bind:src="slide.imgSrc"
            x-bind:alt="slide.imgAlt"
          />
        </div>
        <button
          type="button"
          class="absolute bottom-5 right-5 z-20 rounded-full text-neutral-300 opacity-50 transition hover:opacity-80 focus-visible:opacity-80 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-white active:outline-offset-0"
          aria-label="pause carousel"
          x-on:click="(isPaused = !isPaused)"
          x-bind:aria-pressed="isPaused"
        >
          <svg
            x-cloak
            x-show="isPaused"
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 20 20"
            fill="currentColor"
            aria-hidden="true"
            class="size-7"
          >
            <path
              fill-rule="evenodd"
              d="M2 10a8 8 0 1 1 16 0 8 8 0 0 1-16 0Zm6.39-2.908a.75.75 0 0 1 .766.027l3.5 2.25a.75.75 0 0 1 0 1.262l-3.5 2.25A.75.75 0 0 1 8 12.25v-4.5a.75.75 0 0 1 .39-.658Z"
              clip-rule="evenodd"
            >
            </path>
            <svg
              x-cloak
              x-show="!isPaused"
              xmlns="http://www.w3.org/2000/svg"
              viewBox="0 0 20 20"
              fill="currentColor"
              aria-hidden="true"
              class="size-7"
            >
              <path
                fill-rule="evenodd"
                d="M2 10a8 8 0 1 1 16 0 8 8 0 0 1-16 0Zm5-2.25A.75.75 0 0 1 7.75 7h.5a.75.75 0 0 1 .75.75v4.5a.75.75 0 0 1-.75.75h-.5a.75.75 0 0 1-.75-.75v-4.5Zm4 0a.75.75 0 0 1 .75-.75h.5a.75.75 0 0 1 .75.75v4.5a.75.75 0 0 1-.75.75h-.5a.75.75 0 0 1-.75-.75v-4.5Z"
                clip-rule="evenodd"
              >
              </path>
            </svg>
          </svg>
          <button
            type="button"
            class="absolute bottom-5 right-5 z-20 rounded-full text-neutral-300 opacity-50 transition hover:opacity-80 focus-visible:opacity-80 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-white active:outline-offset-0"
            aria-label="pause carousel"
            x-on:click="(isPaused = !isPaused)"
            x-bind:aria-pressed="isPaused"
          >
            <svg
              x-cloak
              x-show="isPaused"
              xmlns="http://www.w3.org/2000/svg"
              viewBox="0 0 20 20"
              fill="currentColor"
              aria-hidden="true"
              class="size-7"
            >
              <path
                fill-rule="evenodd"
                d="M2 10a8 8 0 1 1 16 0 8 8 0 0 1-16 0Zm6.39-2.908a.75.75 0 0 1 .766.027l3.5 2.25a.75.75 0 0 1 0 1.262l-3.5 2.25A.75.75 0 0 1 8 12.25v-4.5a.75.75 0 0 1 .39-.658Z"
                clip-rule="evenodd"
              >
              </path>
              <svg
                x-cloak
                x-show="!isPaused"
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 20 20"
                fill="currentColor"
                aria-hidden="true"
                class="size-7"
              >
                <path
                  fill-rule="evenodd"
                  d="M2 10a8 8 0 1 1 16 0 8 8 0 0 1-16 0Zm5-2.25A.75.75 0 0 1 7.75 7h.5a.75.75 0 0 1 .75.75v4.5a.75.75 0 0 1-.75.75h-.5a.75.75 0 0 1-.75-.75v-4.5Zm4 0a.75.75 0 0 1 .75-.75h.5a.75.75 0 0 1 .75.75v4.5a.75.75 0 0 1-.75.75h-.5a.75.75 0 0 1-.75-.75v-4.5Z"
                  clip-rule="evenodd"
                >
                </path>
              </svg>
            </svg>
          </button>
        </button>
      </template>
    </div>
  </div>
</astro-text-carousel>
<script>
  class AstroTextCarousel extends HTMLElement {
    constructor() {
      super();
    }
  }

  let selector = 0;
  const maxElements = 3;

  document.addEventListener("DOMContentLoaded", () => {
    const titles: NodeListOf<HTMLElement> =
      document.querySelectorAll(".animatedTitle");

    var theLetters = "abcdefghijklmnopqrstuvwxyz#%&^+=-"; //You can customize what letters it will cycle through
    const ctnt: Array<string> = [
      titles[0].innerHTML,
      titles[1].innerHTML,
      titles[2].innerHTML,
    ]; // Your text goes here
    var speed = 10; // ms per frame
    var increment = 3; // frames per step. Must be >2

    var clen = ctnt;
    var si = 0;
    var stri = 0;
    var block = "";
    var fixed = "";

    playAnimation();

    function resetValues() {
      si = 0;
      stri = 0;
      block = "";
      fixed = "";
      clen = ctnt;
    }

    function playAnimation() {
      //Call self x times, whole function wrapped in setTimeout
      (function rustle(i) {
        setTimeout(function () {
          if (--i) {
            rustle(i);
          }
          nextFrame(i);
          si = si + 1;
        }, speed);
      })(clen[selector].length * increment + 1);
      function nextFrame(pos) {
        for (var i = 0; i < clen[selector].length - stri; i++) {
          //Random number
          var num = Math.floor(theLetters.length * Math.random());
          //Get random letter
          var letter = theLetters.charAt(num);
          block = block + letter;
        }
        if (si == increment - 1) {
          stri++;
        }
        if (si == increment) {
          // Add a letter;
          // every speed*10 ms
          fixed = fixed + ctnt[selector].charAt(stri - 1);
          si = 0;
        }
        titles.forEach((title) => {
          title.innerHTML = fixed + block;
        });
        block = "";
      }
    }

    // Find our component DOM on the page.
    //
    const previousButton: HTMLElement | null =
      document.querySelector(".thePreviousButton");
    const nextButton: HTMLElement | null =
      document.querySelector(".theNextButton");

    const indicators: NodeListOf<HTMLButtonElement> =
      document.querySelectorAll(".anIndicator");

    indicators.forEach((indicator, idx) => {
      indicator.addEventListener("click", () => {
        selector = Number(indicator.id);
        resetValues();
        playAnimation();
      });
    });

    if (previousButton) {
      previousButton.onclick = () => {
        selector--;
        selector %= maxElements;
        if (selector < 0) selector = maxElements;
        indicators[selector].click();
      };
    }

    if (nextButton) {
      nextButton.onclick = () => {
        selector++;
        selector %= maxElements;
        indicators[selector].click();
      };
    }

    setInterval(() => {
      if (nextButton !== null) nextButton.click();
    }, 12500);
  });

  // Find all buttons with the `alert` class on the page.
  customElements.define("astro-text-carousel", AstroTextCarousel);
</script>
